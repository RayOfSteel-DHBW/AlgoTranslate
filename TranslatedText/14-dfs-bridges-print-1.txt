Algorithms 1
Depth-First Search: Finding Bridges

1 – The Research University in the Helmholtz Association
KIT

www.kit.edu

 How do I become a GBI tutor?
Motivation to pass on your experiences to the next
first-year students
Hold tutorials and correct assignments
Slides from previous tutorials and sample solutions
will be provided
Payment: 5 months, 40 hours each, 13.25 €/h

Until the end of the week (28.6.) email to
philipp.kern@kit.edu

2

Thomas Bläsius – Algorithms 1

Institute for Theoretical Computer Science, Scalable Algorithms

 Bridges in Graphs
Definition
Let G = (V; E) be a graph. An edge e = {u; v } ∈ E is called a bridge if u and v lie in
different connected components in G − e.
Bridge

Bridge

Today's goal
find all bridges
learn to better understand depth-first search (DFS)

Why are we interested in bridges?
interesting graph-theoretic structure → smallest possible cuts
decomposes the graph into multiple components → good for divide and conquer

3

Thomas Bläsius – Algorithms 1

Institute for Theoretical Computer Science, Scalable Algorithms

 Reminder: Graph Traversal
Depth-First Search (DFS)
Breadth-First Search (BFS)
start at a node s
start at a node s
visit all neighbors of s
in each step, move to a new neighbor
then all neighbors of the neighbors etc.
dead end (no new neighbor)
→ backtracking: back to the predecessor
Neighbors of neighbors
7

Dead end

s

0
6
5

1

8

9

4

End
s is a dead end
⇒ all nodes reachable from s are colored

visited node
unvisited node
current node

s
Path to current node

3

2

4

7

Thomas Bläsius – Algorithms 1

Neighbors
Layer 1

0

s

3

1

2

Layer 2

4
Layer 3

6

9

5

8

Neighbors of neighbors of neighbors

Institute for Theoretical Computer Science, Scalable Algorithms

 DFS Tree
Observation
when exploring a node we skip edges to already visited nodes
we also call them back edges
non-skipped edges form a tree → tree edges
7

s

0
6

3

5

1

2

Thomas Bläsius – Algorithms 1

9

4

visited node
unvisited node
current node
5

8

Note: Back edges
always point to a predecessor in the DFS tree
English: back edge
directed graphs: additional edge types

Back edge
s
Path to current node
Institute for Theoretical Computer Science, Scalable Algorithms

 Characterization of Bridges via DFS Tree
Bridges and trees
in a tree every edge is a bridge
the back edges are crucial

Note: Notation
Nodes are here labeled with their DFS number
We consider back edges as directed

Example: Why is {0; 6} a bridge?
deleting {0; 6} separates the subtree under 6
from the rest in the DFS tree
there is no back edge from the subtree to a predecessor of 6
in particular, one can no longer reach the root (0)

0
1

6
2

7

3
4

When is a tree edge {u; v } a bridge?
5
let u be the parent and v the child
{u; v } is a bridge ⇔ no back edge from the subtree under v to above v

8
9

Moreover: Back edges are never bridges
6

Thomas Bläsius – Algorithms 1

Institute for Theoretical Computer Science, Scalable Algorithms

 Proof of the Structural Insight
Theorem
An edge {u; v } is a bridge if and only if
{u; v } is a tree edge with parent u and child v and
no back edge from the subtree under v ends above v .
Rough plan: case analysis
Case 1: {u; v } is a back edge ⇒ not a bridge
ˆ
˜
Case 2: {u; v } is a tree edge ⇒ bridge ⇔ (2) holds
Case 2.1: (2) does not hold (there is a back edge) ⇒ not a bridge
Case 2.2: (2) holds (there is no back edge) ⇒ bridge
Note
the case analysis covers all cases
show: in each case the statement of the theorem is satisfied
7

Thomas Bläsius – Algorithms 1

(structural)
(1)
(2)
0
1

6
7

2
3

8

4
5

9

Institute for Theoretical Computer Science, Scalable Algorithms

 Proof of the Structural Insight
Theorem
An edge {u; v } is a bridge if and only if
{u; v } is a tree edge with parent u and child v and
no back edge from the subtree under v ends above v .
Show for Case 1: {u; v } is a back edge ⇒ not a bridge
there is a path between u and v in the DFS tree
u and v remain in the same component when {u; v } is deleted

(structural)
(1)
(2)
0
1

6
7

2

Show for Case 2.1: (2) does not hold (there is a back edge) ⇒ not a bridge 3
′
′
′
′
u
let {v ; u } be the back edge, such that v is in the subtree of v
and u ′ lies above v
u
(Tree path v ; : : : ; v ′ ) + {v ′ ; u ′ } + (Tree path u ′ ; : : : ; u)
v
⇒ u and v remain in the same component

8

4
5

9

v′
7

Thomas Bläsius – Algorithms 1

Institute for Theoretical Computer Science, Scalable Algorithms

 Proof of the Structural Insight
Theorem
An edge {u; v } is a bridge if and only if
{u; v } is a tree edge with parent u and child v and
no back edge from the subtree under v ends above v .
Show for Case 2.2: (2) holds (there is no back edge) ⇒ bridge
let Tv = (Vv ; Ev ) be the subtree under v (including v )
{u; v } is the only edge between Tv and nodes outside, because:
assume there is another edge {u ′ ; v ′ } with v ′ ∈ Vv and u ′ ∈
= Vv
{u ′ ; v ′ } is not a tree edge, otherwise u ′ would be in Tv
{u ′ ; v ′ } is thus a back edge and u ′ is a predecessor of v ′ in the DFS tree
since u ′ ∈
= Vv , u ′ must also lie above v ⇒ (2) does not hold
deleting {u; v } separates Tv from the rest of the graph ⇒ {u; v } is a bridge
7

Thomas Bläsius – Algorithms 1

(structural)
(1)
(2)
u
v

Tv

u′
v′

Institute for Theoretical Computer Science, Scalable Algorithms

 From Structural to Algorithmic Perspective
Theorem
An edge {u; v } is a bridge if and only if
{u; v } is a tree edge with parent u and child v and
no back edge from the subtree under v ends above v .

(structural)
(1)
(2)
0

Algorithmic perspective
(1) is easy to check for an edge {u; v }
Problem with (2): looking at the entire subtree under v is expensive

1

6
7

2

(linear in the size of the subtree → potentially quadratic overall)
3

Plan going forward
define a value low(v ) for each node v
such that one can read from low(v ) whether (2) is satisfied for v
compute these low(v ) during DFS at the same time
8

Thomas Bläsius – Algorithms 1

8

4
5

9

Institute for Theoretical Computer Science, Scalable Algorithms

 Algorithmic Implementation
Definition
Let low(v ) be the minimum of the DFS number of v and the smallest DFS number
that can be reached from a node in the subtree under v with a back edge.
When is a tree edge {u; v } a bridge?
no back edge (2) ⇒ low(v ) = DFS number of v
back edge (not 2) ⇒ low(v ) < DFS number of v
thus: {u; v } is a bridge ⇔ low(v ) = DFS number of v

0

Thomas Bläsius – Algorithms 1

6
6

1
0

How do we compute low(v )?
we can handle this on-the-fly during DFS
roughly: low(v ) results from
the DFS number of v
the back edges from v
the values low(u1 ); : : : ; low(uk ) of the children u1 ; : : : ; uk of v
9

0

6
7

2
3
0

6

0
8

4
1

9

5
1

9

Institute for Theoretical Computer Science, Scalable Algorithms

 Computation of low(v )
Definition
Let low(v ) be the minimum of the DFS number of v and the smallest DFS number
that can be reached from a node in the subtree under v with a back edge.
Situations in which we adjust low(v )
v seen for the first time: low(v ) := DFS number of v
back edge {v ; u} found: low(v ) := min{low(v ); DFS number of u}
backtracking from a child u of v : low(v ) := min{low(v ); low(u)}

0

0
6
6

1

Correctness
show: when backtracking from v to the parent, then low(v ) is correct
structural induction:
it holds for the leaves
(beginning)
assume it holds for the children of v
(assumption)
then it also holds for v
(step)
10

Thomas Bläsius – Algorithms 1

1
0

6
7
7

2
3
3
0
1

8
6

2
0
8

4
4
1

9

5
5
1

9

Institute for Theoretical Computer Science, Scalable Algorithms

 Algorithm → Recursive Implementation

DFS(Graph G; Node v ; Node p)
dfs[v ] := next_dfs
next_dfs := next_dfs + 1
low[v ] := dfs[v ]
for Node u in N(v ) do
if u = p then continue
if dfs[u] = ∞ then
DFS(G; u; v )
low[v ] = min{low[v ]; low[u]}
else
low[v ] = min{low[v ]; dfs[u]}
11

Thomas Bläsius – Algorithms 1

Reminder: Situations in which we adjust low[v ]
v seen for the first time: low[v ] := dfs[v ]
back edge {v ; u}: low[v ] := min{low[v ]; dfs[u]}
backtracking from child u to v : low[v ] := min{low[v ]; low[u]}

first visit at v

Attention: we must skip u if u is the
parent of v
(otherwise we interpret the tree edge from u to v as a back edge from v to u)

DFS for child u finished → backtracking from u to v
neighbor u already seen before → back edge
Institute for Theoretical Computer Science, Scalable Algorithms

 Algorithm → Implementation
Note on implementation in (pseudo)code
two variants
recursive: each node calls DFS for all its children
iterative: without recursive calls
Recursive implementation
beautifully simple
backtracking happens almost automatically
problem: possibly deep recursion → uses a lot of stack memory
stack memory is statically allocated → when it's full the program crashes
(stack overflow)

Iterative implementation
cumbersome when you want to do something during backtracking
you then essentially have to manually manage the recursion tree
advantage: mainly uses (dynamically allocated) heap memory
12

Thomas Bläsius – Algorithms 1

Institute for Theoretical Computer Science, Scalable Algorithms

 Summary & Outlook
DFS – Depth-First Search
very fundamental algorithm for graph traversal
basis for solving many different problems
two important time points:
discovering a node
backtracking from a child to the parent
A bit of graph theory
bridges in graphs
structural insight → efficient algorithm
Next time
more DFS on directed graphs
How do you dress properly?
13

Thomas Bläsius – Algorithms 1

Institute for Theoretical Computer Science, Scalable Algorithms

 